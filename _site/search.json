[
  {
    "objectID": "project/benchmarking/index.html",
    "href": "project/benchmarking/index.html",
    "title": "Can Ravens Forecast?",
    "section": "",
    "text": "Humans have the magical ability to plan for future events, for future gain. It’s not quite a uniquely human trait. Because apparently ravens can match a four-year-old.\nAn abundance of data, and some very nice R packages, make our ability to plan all the more powerful.\nIn the Spring of 2018 I looked at sales from an historical perspective in Six Months Later.. Here I’ll use the data to model a time-series forecast for the year ahead. The techniques apply to any time series with characteristics of trend, seasonality or longer-term cycles.\nWhy forecast sales? Business plans require a budget, e.g. for resources, marketing and office space. A good projection of revenue provides the foundation for the budget. And, for an established business, with historical data, time-series forecasting is one way to deliver a robust projection.\nWithout exogenous data, the forecast assumes one continues to do what one’s doing. So, it provides a good starting-point. Then one might, for example, add assumptions about new products or services. And, if there is forward-looking data available, for example, market size projections (with past projections to train the model), then one could feed this into the forecast modelling too.\n\nlibrary(conflicted)\nlibrary(tidyverse)\nconflict_prefer_all(\"dplyr\")\nlibrary(wesanderson)\nlibrary(fpp3)\nlibrary(scales)\nlibrary(clock)\nlibrary(usedthese)\n\nconflict_scout()\n\n\ntheme_set(theme_bw())\n\n(cols &lt;- wes_palette(name = \"IsleofDogs2\"))\n\n\n\n\n\n\n\n\nFirst I’ll check the encoding of the data.\n\nurl &lt;-\n  \"https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/\"\n\ngcloud_csv &lt;- str_c(url, \"703943/G-Cloud_spend_data_to_end_March_2018.csv\")\n\ndos_csv &lt;- str_c(url, \"703952/DOS_spend_data_to_end_March_2018.csv\")\n\nnames &lt;- c(gcloud_csv, dos_csv)\n\n# Use walk to suppress the printing of list element numbers\n\nwalk(names, \\(x) {\n  p &lt;- guess_encoding(x)\n  print(p)\n})\n\n# A tibble: 2 × 2\n  encoding   confidence\n  &lt;chr&gt;           &lt;dbl&gt;\n1 ISO-8859-1       0.4 \n2 ISO-8859-2       0.22\n# A tibble: 2 × 2\n  encoding   confidence\n  &lt;chr&gt;           &lt;dbl&gt;\n1 ISO-8859-1       0.36\n2 ISO-8859-2       0.24\n\n\nNext I’ll set up a vector of column names to apply consistently to both files, and import the data with the suggested encoding.\n\ncolnam &lt;- \n  c(\"sector\",\n    \"lot\",\n    \"date\",\n    \"spend\",\n    \"status\",\n    \"supplier\",\n    \"customer\",\n    \"framework\")\n\nread_dm &lt;- \\(x){\n  read_csv(\n    x,\n    col_names = colnam,\n    skip = 1,\n    locale = locale(encoding = \"ISO-8859-1\"),\n    show_col_types = FALSE)\n}\n\nraw &lt;- map(names, read_dm) |&gt; \n  set_names(c(\"gcloud\", \"dos\")) |&gt; \n  bind_rows() |&gt; \n  mutate(framework = if_else(is.na(framework), \"DOS\", framework))\n\nI’d like to create some new features: Month-end dates, something to distinguish between the two frameworks (G-Cloud or DOS). The spend has a messy format and needs a bit of cleaning too.\nThe lot structure for G-Cloud has evolved over time, but fortunately, there is a simple mapping, i.e. PaaS and IaaS became Cloud Hosting, SaaS became Cloud Software, and Specialist Cloud Services became Cloud Support, so I’ll standardise on the latter.\n\nboth &lt;- raw |&gt;\n  mutate(\n    month_end = date_parse(str_c(date, \"01\", sep = \"-\"), \n                           format = \"%b-%y-%d\") |&gt; \n      add_months(1) |&gt; add_days(-1),\n    date = yearmonth(month_end),\n    framework = str_extract(framework, \".{3,7}\"),\n    spend = str_remove(spend, coll(\"£\")),\n    spend = str_replace(spend, \"^\\\\(\", \"-\"),\n    spend = parse_number(spend) / 1000000,\n    lot = recode(\n      lot,\n      \"Software as a Service (SaaS)\" = \"Cloud Software\",\n      \"Infrastructure as a Service (IaaS)\" = \"Cloud Hosting\",\n      \"Platform as a Service (PaaS)\" = \"Cloud Hosting\",\n      \"Specialist Cloud Services\" = \"Cloud Support\"\n      )\n)\n\nThe tidied data now needs to be converted to a tsibble[@tsibble], the temporal equivalent of a tibble[@tibble].\nR has evolved since I first wrote this post. At that time, it was necessary to either split the data into the two frameworks (G-Cloud and DOS) and forecast them separately. Or, as I did with the three G-Cloud lots, use the purrr package to iterate through a forecast.\nThe tsibble package combined with the newer fable[@fable] and feasts[@feasts] packages, make this easier. One of the defining feature of the tsibble is the key. I want a model for each framework, so I’m setting this as the tsibble key (and the temporal variable as the tsibble index).\n\nboth_ts &lt;- both |&gt;\n  summarise(spend = sum(spend), .by = c(date, framework)) |&gt; \n  as_tsibble(key = framework, index = date)\n\nboth_ts |&gt; \n  ggplot(aes(date, spend, colour = framework)) +\n  geom_line(key_glyph = \"timeseries\") +\n  scale_y_continuous(labels = label_dollar(prefix = \"£\", suffix = \"m\")) +\n  scale_colour_manual(values = cols[c(3, 4)]) +\n  labs(x = NULL, y = NULL, title = \"Monthly Digital Marketplace Sales\")\n\n\n\n\n\n\n\n\nBy decomposing the historical data we can tease out the underlying trend and seasonality:\n\nTrend: The sales for both frameworks have grown over time as more Suppliers have added their services to the Government frameworks, and more Public Sector organizations have found the benefits of purchasing Cloud services through this faster, simpler, more transparent and more competitive contracting vehicle.\nSeasonality: Suppliers often manage their sales and financials based on a quarterly cycle, with a particular emphasis on a strong close to the financial year. And Government Buyers may want to make optimal use of their budgets at the close of their financial year (March 31st). Consequently, we see quarterly seasonality with an extra spike at financial year-end.\n\n\nboth_ts |&gt;\n  model(stl = STL(spend ~ trend(window = 7) + season(window = \"periodic\"))) |&gt;\n  components() |&gt;\n  autoplot() +\n  scale_colour_manual(values = cols[c(3, 4)]) +\n  labs(x = NULL, title = \"Time Series Decomposition\")\n\n\n\n\n\n\n\n\nI’ll use auto.arima: AutoRegressive Integrated Moving Average modelling which aims to describe the autocorrelations in the data.\nBy setting stepwise and approximation to FALSE, auto.arima will explore a wider range of potential models.\nI’ll forecast with the default 80% and 95% prediction intervals. This means the darker-shaded 80% range should include the future sales value with an 80% probability. Likewise with a 95% probability when adding the wider and lighter-shaded area.\nUse of autoplot would simplify the code, but personally I like to expose all the data, for example unpacking the prediction intervals, and have finer control over the visualisation."
  },
  {
    "objectID": "blog/plunge/index.html",
    "href": "blog/plunge/index.html",
    "title": "Moving House",
    "section": "",
    "text": "After reading up on Blogdown, I decided to take the plunge and leave Wordpress for a quieter life in Blogdown."
  },
  {
    "objectID": "blog/plunge/index.html#motivation",
    "href": "blog/plunge/index.html#motivation",
    "title": "Moving House",
    "section": "Motivation",
    "text": "Motivation\nMy former site looked pretty good. But it was expensive to maintain.\nI was spending more than I wished to get a performant site. I could have spent less, and perhaps I’m easily seduced by “bells & whistles”, e.g. CloudFlare Plus and “GoGeek” hosting. But a non-speedy site is a bit of a turn-off.\nAnd it wasn’t just cost. It also took a lot of non-R effort to publish a post with Rmarkdown in the way I wanted. My main interest is in writing R code. Not wrestling Wordpress and multiple plugins into submission.\nA reboot was also a chance to re-brand. When I originally set up thinkr.biz I was initially unaware of a similarly-named site in France. Although my personal blog posed no threat across the Channel, and we co-existed for a few years, I anyway prefer having something a little more unique."
  },
  {
    "objectID": "blog/plunge/index.html#why-blogdown",
    "href": "blog/plunge/index.html#why-blogdown",
    "title": "Moving House",
    "section": "Why Blogdown?",
    "text": "Why Blogdown?\nI like Yihui Xie’s Blogdown primarily because it simplifies the path from Rmarkdown to blog. No more WWE-style detour. I can tweak a line of code in Rmarkdown, serve_site, and immediately see the updated blog locally. When I’m ready to publish, I just drag the public folder into Netlify, and voilà it’s live."
  },
  {
    "objectID": "blog/plunge/index.html#my-personal-roadmap",
    "href": "blog/plunge/index.html#my-personal-roadmap",
    "title": "Moving House",
    "section": "My personal roadmap",
    "text": "My personal roadmap\nThere are different routes one can take. Here’s mine.\n\nChoose a theme\nIn his book, Yihui advises asking yourself: “Do I like this fancy theme so much that I will definitely not change it in the next couple of years?” It’s very sound advice. Nonetheless, I’m easily seduced, so explored all possible fancy themes. In part because I like creating my own graphic art, so I wanted something that could help these little creations shine.\nOddly, I started by looking at one of Yihui’s recommended themes and discarded it, only to return to it again much later after an exhaustive exploration of other themes. There are many superficially nice Hugo themes. But when you actually play with them, there’s little below the surface and/or an absence of serious upkeep.\nHugo Academic is not the most appealing in the “shop window”. But when you take it for a test spin, and really take it through its paces, it offers a richness, flexibility and investment that reeled me in. After customising it to my taste, and paring back optional bits I do not need, simply by switching them off, it gave me something I feel very happy with.\n\n\nMigrate\nThere are assisted migration paths, e.g. from Wordpress, discussed in the Blogdown book. However I wanted to review and upgrade the R code in my original posts (only a dozen or so at the time). So, one-by-one, I copied each Rmd file into the projects folder of my new site, tweaked the code, and used serve_site to see the end product.\nI took this approach because R, especially the tidyverse and its ecosystem, is rapidly evolving. For example, the latest release of dplyr has some great new column-wise and row-wise functions. And spread and gather have been superseded by the more capable pivot_wider and pivot_longer. So it was a chance to upgrade my code.\nFor one or two of the more processing-intensive projects, I used either cache = TRUE in the code chunk, or saveRDS and readRDS to load data prepared earlier.\n\n\nBuild\nAn option I haven’t yet pursued is to host all my website source files in a GIT repository. Then Netlify could call Hugo to render my website automatically. Right now, my site content is simple enough to be able to use the Build Website button in RStudio.\nThe web-site is a static build, so it’s fast out-of-the-box, i.e. no need for speed-inducing wallet-slimming plugins.\n\n\nDeploy\nNetlify is recommended by bookdown.org. And it’s free for personal projects. The only small annual cost is my domain name.\nChoosing a domain name, which one can do via Netflify, is a little tricky. Many of the ideas one might have, have already occurred to someone else. And when you do find something available, there’s always that niggling feeling there may be something better out there.\nI chose Quantum Jitter for several reasons:\n\nI often use ggplot2’s geom_jitter\nLike a Quant, I have an interest in using machine learning to assess stock fundamentals\nLike the quantum world, my work features statistics and randomness\nIt was available\n\nAfter running the build in RStudio, which for my site only takes a few minutes, I can simply drag my newly-created public folder into Netlify’s Deploys page and bingo, the site’s live in a jiffy.\nSo, if you are toying with the idea of moving house, I can recommend a quieter life in Blogdown."
  },
  {
    "objectID": "blog/dark/index.html",
    "href": "blog/dark/index.html",
    "title": "Night Mode",
    "section": "",
    "text": "It was only last April that I renovated my blog as described in A Fresh Lick of Paint. Following the launch of a new open-source scientific and technical publishing system, it’s time to get the paint brush out again.\nI initially started to convert some of my projects and posts from Rmarkdown to qmd using format: hugo-md. The thought was to keep my existing site aesthetic, with its beautiful Hugo Apéro theme, unchanged. I found though that it wasn’t possible to make full use of the myriad features offered by Quarto. For example code-link: true and date-modified: last-modified. This is because the document metadata is preserved as-is for formats like Hugo.\nSo, I decided to start building a “full-on Quarto” version, i.e. format: html, with the intent of switching the website over only if I preferred the new versus the old when running the two side-by-side.\nI’ve switched over.\nI’ve given the site a unique look-and-feel by customising the flatly and darkly themes with a number of SASS variables in two theme.scss files, for example, to adopt my own reversible colour scheme.\nThe landing page switches image based on the dark-mode setting by making the class of the first image .dark-mode and adding these two lines in the dark theme’s custom scss file:\nThen the second image has the class .light-mode and uses the mirror css code in the light theme’s custom scss file:\nFor the navbar logo, my initial idea was to have a mid-grey logo which darkens and lightens by adjusting the brightness based on the mode:\nThis worked nicely for some browsers, e.g. firefox, but not others, e.g. safari; perhaps because the cache is cleared for some but not all. I’ve instead implemented a dark-mode logo using a background image in dark.scss1.\nAs for other features, not only does the site now have the code-link, date-modified, and dark-mode, but it also restores the grid-based listing pages given up when moving from Hugo Academic. Many other Quarto features such as call-outs, citations, footnotes and freeze are also now deployed.\nLua Filters are a powerful tool. The _quarto.yml file includes one to check my current installed version of Quarto and then insert that into the website’s page-footer2.\nWhilst refreshing the site, I took the opportunity to make my 404 page a little more welcoming as it seemed to be one of my more popular pages. Feel free to try it by visiting an imaginatively made-up page of your choice.\nThe updated repo is public on github."
  },
  {
    "objectID": "blog/dark/index.html#footnotes",
    "href": "blog/dark/index.html#footnotes",
    "title": "Night Mode",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAs suggested in Quarto Discussions↩︎\nSuggested solution in Stack Overflow↩︎"
  },
  {
    "objectID": "blog/tail/index.html",
    "href": "blog/tail/index.html",
    "title": "Painting Tails",
    "section": "",
    "text": "There are techniques for painting a region under a curve. But the experimental ggfx package offers an interesting alternative solution based on the blending modes familiar to users of Photoshop.\n\nlibrary(conflicted)\nlibrary(tidyverse)\nconflict_prefer_all(\"dplyr\", quiet = TRUE)\nconflict_prefer(\"as_date\", \"lubridate\")\nlibrary(scales)\nlibrary(ggfx)\nlibrary(patchwork)\nlibrary(wesanderson)\nlibrary(clock)\nlibrary(tidyquant)\n\n\ntheme_set(theme_bw())\n\n(cols &lt;- wes_palette(\"Royal1\"))\n\n\n\n\n\n\n\n\nThe advantage here is that the tail-painting aesthetic needs no information about the shape of the curve; only the limits on the x-axis.\nThe left plot shows the raw components without blending. The right plot is only retaining the red where there is a layer below.\n\np0 &lt;- tibble(outcome = rnorm(10000, 20, 2)) |&gt;\n  ggplot(aes(outcome)) +\n  scale_y_continuous(labels = label_percent())\n\np1 &lt;- p0 +\n  geom_density(adjust = 2, fill = cols[3]) +\n  annotate(\"rect\",\n    xmin = 15, xmax = 18, ymin = -Inf, ymax = Inf,\n    fill = cols[2]\n  ) + \n  labs(title = \"Without Blending\", y = \"Density\")\n\np2 &lt;- p0 +\n  as_reference(geom_density(adjust = 2, fill = cols[3]), id = \"density\") +\n  with_blend(annotate(\"rect\",\n    xmin = 15, xmax = 18, ymin = -Inf, ymax = Inf,\n    fill = cols[2]\n  ), bg_layer = \"density\", blend_type = \"atop\") + \n  labs(title = \"With Blending\", y = NULL)\n\np1 + p2\n\n\n\n\n\n\n\n\nOf course the red box could also be layered behind a density curve with alpha applied so it shows through. But if the preference is tail-only colouring, it’s a neat solution.\nBlending is actually a handy solution for any awkward shape. The same technique is used here with a time series ribbon summarising the median, lower and upper quartiles of a set of closing stock prices.\n\n\n\n\n\n\nNote\n\n\n\nTry this patch if having problems with tq_get\nThis chunk is using the development version of dplyr which introduces temporary grouping with .by.\n\n\n\ntickrs &lt;- c(\"AAPL\", \"NFLX\", \"TSLA\", \"ADBE\", \"META\", \"GOOG\", \"MSFT\")\n\np0 &lt;- tq_get(tickrs, get = \"stock.prices\", from = \"2022-01-01\") |&gt;\n  filter(!is.na(close)) |&gt; \n  reframe(\n    close = quantile(close, c(0.25, 0.5, 0.75)),\n    quantile = c(\"lower\", \"median\", \"upper\") |&gt; factor(),\n    .by = date\n  ) |&gt;\n  pivot_wider(names_from = quantile, values_from = close) |&gt;\n  ggplot(aes(date, median)) +\n  annotate(\"text\",\n    x = ymd(\"2022-03-16\"), y = 100,\n    label = \"Helpful\\nAnnotation\", colour = \"black\"\n  ) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(x = NULL)\n\np1 &lt;- p0 +\n  geom_ribbon(aes(ymin = lower, ymax = upper), fill = cols[1]) +\n  geom_line(colour = cols[3]) +\n  annotate(\"rect\",\n    xmin = ymd(\"2022-03-01\"), xmax = ymd(\"2022-03-31\"),\n    ymin = -Inf, ymax = Inf, \n    fill = cols[4], colour = \"black\", linetype = \"dashed\"\n  ) + \n  labs(title = \"Without Blending\", y = \"Closing Price\")\n\np2 &lt;- p0 +\n  as_reference(geom_ribbon(aes(ymin = lower, ymax = upper), \n                           fill = cols[1]), id = \"ribbon\") +\n  with_blend(\n    annotate(\n      \"rect\",\n      xmin = ymd(\"2022-03-01\"), xmax = ymd(\"2022-03-31\"),\n      ymin = -Inf, ymax = Inf, \n      fill = cols[4], colour = \"black\", linetype = \"dashed\"\n      ),\n    bg_layer = \"ribbon\", blend_type = \"atop\"\n    ) +\n  geom_line(colour = cols[3]) + \n  labs(title = \"With Blending\", y = NULL)\n\np1 + p2 +\n  plot_annotation(title = \"Median Price Bounded by Upper & Lower Quartiles\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Luka  Kovačević ",
    "section": "",
    "text": "email - github - scholar\nThird-year PhD student in Biostatistics at Clare Hall, and the MRC Biostatistics Unit under the supervision of Professor John Whittaker and Professor Sach Mukherjee, where I work on causal machine learning methods for genomics. My interests are in developing methods for predicting effects of interventions using tools from causality, Bayesian statistics, and machine learning.\nI’m currently visiting Relation Therapeutics as a Machine Learning Research Intern.\nIn the past, I’ve worked on adaptive clinical trial methodology at the MRC BSU and uncertainty quantification for COVID-19 forecasting at the S3RI in collaboration with PHE and Dstl. I obtained an MSc in Statistical Science from the University of Oxford and a BSc in Mathematics with Computer Science from the University of Southampton."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index-old.html",
    "href": "index-old.html",
    "title": "Website",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nMay 23, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nMay 20, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "index-old-latest.html",
    "href": "index-old-latest.html",
    "title": "Luka  Kovačević ",
    "section": "",
    "text": "Second-year PhD student in Biostatistics at Clare Hall, and the MRC Biostatistics Unit under the supervision of Professor John Whittaker and Professor Sach Mukherjee. The focus of my research is causal machine learning methods for single-cell genomics. More generally, I’m interested in developing methods for prediction-under-intervention using tools from causality, Bayesian statistics, and machine learning.\n Prior to starting my PhD, I worked on adaptive clinical trial methodology at the MRC BSU. I also worked on uncertainty quantification for COVID-19 forecasting at the S3RI in collaboration with PHE and Dstl. I obtained an MSc in Statistical Science from the University of Oxford and a BSc in Mathematics with Computer Science from the University of Southampton.\n\n\nResearch Interests\n\nCausality\nCounterfactual Prediction\nBayesian Inference\nProbabilistic Modelling \n\n\n\n\n\nemail - github - scholar"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "Usedthese\n\n\n3 min\n\n\nHexcited to unveil usedthese: an R package that tells you what you just did in case you can’t recall!\n\n\n\nJan 22, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNight Mode\n\n\n3 min\n\n\nMaking full use of Quarto and sprucing up an oft-visited 404 page\n\n\n\nNov 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPainting Tails\n\n\n3 min\n\n\nIf you’re a cat, go find the nearest open pot of paint. But if you’re a data scientist, what to do?\n\n\n\nApr 26, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA Fresh Lick of Paint\n\n\n6 min\n\n\nStaying in Blogdown and renovating with the Hugo Apéro theme\n\n\n\nApr 9, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMoving House\n\n\n4 min\n\n\nLeaving Wordpress for a quieter life in Blogdown with the Hugo Academic theme\n\n\n\nJul 26, 2020\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/usedthese/index.html",
    "href": "blog/usedthese/index.html",
    "title": "Usedthese",
    "section": "",
    "text": "Who ordered that? You may be wondering."
  },
  {
    "objectID": "blog/usedthese/index.html#motivation",
    "href": "blog/usedthese/index.html#motivation",
    "title": "Usedthese",
    "section": "Motivation",
    "text": "Motivation\nUsedthese was born of a selfish desire to better understand my personal package & function usage. I find it makes it easier for me to check for consistency of usage, acknowledge the packages I most need to keep abreast of (or go deeper on), and spot opportunities for updates to the latest and greatest.\nIt started as a chunk of code that varied from project to project. Evolved into a common piece of code included in all projects. And finally, with the help and guidance of the R Packages (2e) book, has entered the hallowed halls of CRAN."
  },
  {
    "objectID": "blog/usedthese/index.html#example-use-case",
    "href": "blog/usedthese/index.html#example-use-case",
    "title": "Usedthese",
    "section": "Example Use Case",
    "text": "Example Use Case\nEach “little project” on this Quarto site focuses on a data science technique or machine learning model to analyse real-world data. At the foot of each of these is a quantified view of the R packages and functions used in the associated code. This is achieved by including used_here() in each Quarto document.\nused_there() scrapes all the tables created by used_here() to enable a Favourite Things article on how R packages and functions are used across the website.\nWhen the Tidyverse blog announced changes to dplyr and purrr a quick review of my Favourite Things identified a number of opportunities to try out the exciting new features. For example, dplyr introduced temporary grouping with the .by argument for mutate() and amigos. group_by() and ungroup() had been used many times and most of these occurrences could be replaced with the new more concise approach."
  },
  {
    "objectID": "blog/usedthese/index.html#conflicted",
    "href": "blog/usedthese/index.html#conflicted",
    "title": "Usedthese",
    "section": "Conflicted?",
    "text": "Conflicted?\nUsethese is designed to work in conjunction with the conflicted package. Whilst library() supports exclusion and include.only arguments, it can feel a little awkward when dealing with pre-loaded base packages or meta-packages such as the tidyverse, tidymodels and fpp3. Conflicted tells you when you try to use a function whose name is shared by two or more loaded packages. And it offers fine-grained conflict resolution based on your preferences."
  },
  {
    "objectID": "blog/usedthese/index.html#multi-site-usage-analysis",
    "href": "blog/usedthese/index.html#multi-site-usage-analysis",
    "title": "Usedthese",
    "section": "Multi-site Usage Analysis",
    "text": "Multi-site Usage Analysis\nI’m considering adding a function that would enable analysis of usage across multiple opted-in sites. If you do deploy usedthese within your Quarto website and would be willing to have the site included, then please raise an issue with your listing page as the title and select the “usedthese” label. The listing URL should link to one or more posts which include used_here() in the code."
  },
  {
    "objectID": "blog/renovate/index.html#motivation",
    "href": "blog/renovate/index.html#motivation",
    "title": "A Fresh Lick of Paint",
    "section": "Motivation",
    "text": "Motivation\nA couple of years ago I moved house from Wordpress to Blogdown. It’s proved to be a much less stressful life and I plan to stay. Hugo Academic served me well, but sometimes you just need a fresh coat of paint. I liked the look of Hugo Apéro.\nApéro feels simpler and has an elegant design with well-chosen themes and fonts.\nI like to add my own digital art to both the site and Rmarkdown projects, and Apéro gives me more flexibility here. GIF animations, for example, on my home page and in my project and blog lists just work.\nThe dark mode I had with Academic would be a nice-to-have, but not essential."
  },
  {
    "objectID": "blog/renovate/index.html#plan-of-attack",
    "href": "blog/renovate/index.html#plan-of-attack",
    "title": "A Fresh Lick of Paint",
    "section": "Plan of Attack",
    "text": "Plan of Attack\nThe upgrade approach I took was to create a brand new blogdown project in RStudio with the Apéro theme and then copy over and re-knit my projects one by one. This worked well because every project needed at least one change as a direct consequence of the move and re-opening each project also prompted other beneficial updates.\nI focused first on manual deployment, i.e. dragging the Public folder to Netlify, rather than going straight to continuous deployment via Github. Doing it this way would narrow the potential cause of any problems when doing the latter. I also initially deployed to one of Netlify’s auto-generated site names, so my live manually-deployed Academic blog remained unaffected whilst preparing the new site."
  },
  {
    "objectID": "blog/renovate/index.html#set-up",
    "href": "blog/renovate/index.html#set-up",
    "title": "A Fresh Lick of Paint",
    "section": "Set-up",
    "text": "Set-up\nThere’s a very helpful get started authored by the theme owner Alison Hill, so I’ll comment here only on the personal touches I wanted to add.\nIn Hugo Academic, each project’s (or post’s) feature image rendered automatically in both the project list page and in the individual project. In Apéro, I needed to add ![](pathname) to the Rmarkdown file to render the image in an individual project or post. I actually prefer this approach because it means the image then also appears when re-publishing to a blog aggregator which frustratingly was not the case with Academic.\nGiven the taxonomy differences, I created a static/_redirects file so that bookmarks for, say, category/r or tag/statistical-inference (under Academic) would go to categories/r or tags/statistical-inference.\n\n\n/index.xml                          /project/index-R.xml\n/categories/r/index.xml             /project/index-R.xml\n\n\nI had customised my Academic site to show the updated, as well as posted, date for each project and post. So to get the same in Apéro, I copied the themes &gt; hugo-apero &gt; layouts &gt; partials &gt; shared &gt; post-details.html file to layouts &gt; partials &gt; shared &gt; post-details.html, duplicated lines 2-5 below and changed .PublishDate to .Lastmod. As my YAML header for all projects and posts already included lastmod:, the details twistie at the foot of each project (and post) now shows both dates.\n&lt;details {{ .Scratch.Get \"details\" }} class=\"f6 fw7 input-reset\"&gt;\n  &lt;dl class=\"f6 lh-copy\"&gt;\n    &lt;dt class=\"fw7\"&gt;Posted:&lt;/dt&gt;\n    &lt;dd class=\"fw5 ml0\"&gt;{{ .PublishDate.Format \"January 2, 2006\" }}&lt;/dd&gt;\n  &lt;/dl&gt;\n  &lt;dl class=\"f6 lh-copy\"&gt;\n    &lt;dt class=\"fw7\"&gt;Updated:&lt;/dt&gt;\n    &lt;dd class=\"fw5 ml0\"&gt;{{ .Lastmod.Format \"January 2, 2006\" }}&lt;/dd&gt;\n  &lt;/dl&gt;\nI used a tag cloud in Academic and wanted to replicate this too. To do so, I also copied the themes &gt; hugo-apero &gt; layouts &gt; partials &gt; shared &gt; summary-li.html file to layouts &gt; partials &gt; shared and changed the last section to refer to tags rather than categories. I removed most of the other code to simplify the About page, so my customised summary-li.html contained only the code below. This change also required a tweak to the content &gt; about &gt; main &gt; index.md to replace number_categories: with a number_tags: parameter.\n&lt;section class=\"featured-content\"&gt;\n{{ $page := . }} &lt;!--save current page--&gt;\n\n{{ $number_tags := $page.Params.number_tags | default 0 }}\n{{ if ge $number_tags 1 }}\n  &lt;article{{ if .Params.show_outro }} class=\"bb pb5\"{{ end }}&gt;\n  &lt;h5 class=\"f4 mv4 ttu tracked lh-title bt pv3\"&gt;Themes&lt;/h5&gt;\n  {{ range first $number_tags site.Taxonomies.tags.ByCount }}\n      &lt;a class=\"f6 link dim ba ph3 pv2 mb2 dib mr2\" href=\"{{ .Page.RelPermalink }}\"&gt;{{ .Page.Title }} ({{ .Count }})&lt;/a&gt;\n  {{ end }}\n  &lt;/article&gt;\n{{ end }}\n&lt;/section&gt;\nFormspree is removing support for email-based forms, so my contact.md required a randomly-generated formspree_form_id: rather than an email address."
  },
  {
    "objectID": "blog/renovate/index.html#deployment",
    "href": "blog/renovate/index.html#deployment",
    "title": "A Fresh Lick of Paint",
    "section": "Deployment",
    "text": "Deployment\n\nManual\nInitially a few things did not render correctly, e.g. syntax highlighting, which it turned out required renaming the index.Rmd files to index.Rmarkdown. And when the manual deployment to Netlify got stuck uploading, I realised I also needed to change the .Rprofile to blogdown.method = 'markdown' rather than blogdown.method = 'html'.\n\n\nContinuous\nOnce the manual deployment to Netlify was working, I then moved on to continuous deployment via Github. I wanted to switch the commenting engine from Disqus to utterance.es and, as is often the case, wanting one thing results in the need for a bunch of other things; in this case, a public repo on Github. Installing the latter provides a more elegant fit with the Apéro design and has some nice advantages.\nAnd because I wanted to deploy a pre-existing RStudio project to Github, rather than following the usual Github-first practice, I found this guidance helpful.\nI played around a bit with the .gitignore file and found I could exclude quite a lot of stuff that Netlify would not need to do the Hugo build.\nThe Netlify deployment via Github did initially fail with a “Base directory does not exist” message. The fix there was to leave the base directory in Netlify’s build settings blank rather than using the repo URL (which it already had under current repository).\n\nThen finally I could flip my live site over to continuous deployment, pack away my paint pots, paint roller and step ladder, put my feet up in front of a roaring fire and bask in the warmth of my newly-renovated blogdown home.\nPost-deployment there was initially an issue with the RSS feed showing only the summary. Adding a layouts/_default/rss.xml file using the Hugo default with .Summary changed to .Content fixed that."
  },
  {
    "objectID": "project/index.html",
    "href": "project/index.html",
    "title": "Projects",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Updated - Oldest\n        \n         \n          Updated - Newest\n        \n     \n  \n\n\n\n\n\n\n\n\nCan Ravens Forecast?\n\n\n6 min\n\n\nTime series forecasting using cloud services spend data\n\n\n\nJul 29, 2018\n\n\n\n\n\nNov 4, 2024\n\n\n\n\n\n\n\nNo matching items"
  }
]